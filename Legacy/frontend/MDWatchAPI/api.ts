/* tslint:disable */
/* eslint-disable */
/**
 * RESTApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CandidateDTO
 */
export interface CandidateDTO {
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'candidateId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'candidateStatus'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CandidateDTO
     */
    'cycles'?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'district'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CandidateDTO
     */
    'electionYears'?: Array<number> | null;
    /**
     * 
     * @type {boolean}
     * @memberof CandidateDTO
     */
    'hasRaisedFunds'?: boolean;
    /**
     * 
     * @type {Array<number>}
     * @memberof CandidateDTO
     */
    'inactiveElectionYears'?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'lastF2Date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'lastFileDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'office'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'officeFull'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'party'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'partyFull'?: string | null;
    /**
     * 
     * @type {Array<CandidatePrincipalCommittees>}
     * @memberof CandidateDTO
     */
    'principalCommittees'?: Array<CandidatePrincipalCommittees> | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateDTO
     */
    'state'?: string | null;
}
/**
 * 
 * @export
 * @interface CandidatePrincipalCommittees
 */
export interface CandidatePrincipalCommittees {
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'affiliatedCommitteeName'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof CandidatePrincipalCommittees
     */
    'candidateIds'?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'committeeId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'committeeType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'committeeTypeFull'?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof CandidatePrincipalCommittees
     */
    'cycles'?: Array<number> | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'designation'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'designationFull'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'filingFrequency'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'firstF1Date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'firstFileDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'lastF1Date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'lastFileDate'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'organizationType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'organizationTypeFull'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'party'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'partyFull'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'state'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidatePrincipalCommittees
     */
    'treasurerName'?: string | null;
}
/**
 * 
 * @export
 * @interface CandidateUIDTO
 */
export interface CandidateUIDTO {
    /**
     * 
     * @type {string}
     * @memberof CandidateUIDTO
     */
    'candidateId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateUIDTO
     */
    'firstName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateUIDTO
     */
    'lastName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CandidateUIDTO
     */
    'party'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof CandidateUIDTO
     */
    'wasElected'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof CandidateUIDTO
     */
    'district'?: string | null;
}
/**
 * 
 * @export
 * @interface FinanceTotalsDTO
 */
export interface FinanceTotalsDTO {
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'activeThrough'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'addressState'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'candidateElectionYear'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'candidateId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'candidateStatus'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'cashOnHandEndPeriod'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'cycle'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof FinanceTotalsDTO
     */
    'cycles'?: Array<number> | null;
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'debtsOwedByCommittee'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'disbursements'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'electionYear'?: number;
    /**
     * 
     * @type {Array<number>}
     * @memberof FinanceTotalsDTO
     */
    'electionYears'?: Array<number> | null;
    /**
     * 
     * @type {boolean}
     * @memberof FinanceTotalsDTO
     */
    'federalFundsFlag'?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof FinanceTotalsDTO
     */
    'hasRaisedFunds'?: boolean | null;
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'individualItemizedContributions'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'lastF2Date'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'office'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'officeFull'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof FinanceTotalsDTO
     */
    'otherPoliticalCommitteeContributions'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'party'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'partyFull'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FinanceTotalsDTO
     */
    'state'?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleBCandidateOverview
 */
export interface ScheduleBCandidateOverview {
    /**
     * 
     * @type {number}
     * @memberof ScheduleBCandidateOverview
     */
    'totalDisbursements'?: number;
    /**
     * 
     * @type {number}
     * @memberof ScheduleBCandidateOverview
     */
    'totalResultPages'?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBCandidateOverview
     */
    'candidateId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBCandidateOverview
     */
    'principalCommitteeId'?: string | null;
}
/**
 * 
 * @export
 * @interface ScheduleBDetailDTO
 */
export interface ScheduleBDetailDTO {
    /**
     * 
     * @type {string}
     * @memberof ScheduleBDetailDTO
     */
    'committeeId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBDetailDTO
     */
    'committeeName'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ScheduleBDetailDTO
     */
    'cycle'?: number;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBDetailDTO
     */
    'recipientId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ScheduleBDetailDTO
     */
    'recipientName'?: string | null;
}

/**
 * CandidateApi - axios parameter creator
 * @export
 */
export const CandidateApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCandidateKeyGet: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiCandidateKeyGet', 'key', key)
            const localVarPath = `/api/Candidate/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCandidateYearsGet: async (years?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Candidate/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (years) {
                localVarQueryParameter['years'] = years;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CandidateApi - functional programming interface
 * @export
 */
export const CandidateApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CandidateApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCandidateKeyGet(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CandidateDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCandidateKeyGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCandidateYearsGet(years?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CandidateDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCandidateYearsGet(years, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CandidateApi - factory interface
 * @export
 */
export const CandidateApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CandidateApiFp(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCandidateKeyGet(key: string, options?: any): AxiosPromise<Array<CandidateDTO>> {
            return localVarFp.apiCandidateKeyGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCandidateYearsGet(years?: Array<number>, options?: any): AxiosPromise<Array<CandidateDTO>> {
            return localVarFp.apiCandidateYearsGet(years, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CandidateApi - object-oriented interface
 * @export
 * @class CandidateApi
 * @extends {BaseAPI}
 */
export class CandidateApi extends BaseAPI {
    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public apiCandidateKeyGet(key: string, options?: AxiosRequestConfig) {
        return CandidateApiFp(this.configuration).apiCandidateKeyGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [years] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CandidateApi
     */
    public apiCandidateYearsGet(years?: Array<number>, options?: AxiosRequestConfig) {
        return CandidateApiFp(this.configuration).apiCandidateYearsGet(years, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FinanceTotalsApi - axios parameter creator
 * @export
 */
export const FinanceTotalsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFinanceTotalsKeyGet: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiFinanceTotalsKeyGet', 'key', key)
            const localVarPath = `/api/FinanceTotals/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFinanceTotalsKeyYearsGet: async (key: string, years?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiFinanceTotalsKeyYearsGet', 'key', key)
            const localVarPath = `/api/FinanceTotals/{key}/years`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (years) {
                localVarQueryParameter['years'] = years;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFinanceTotalsYearsGet: async (years?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/FinanceTotals/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (years) {
                localVarQueryParameter['years'] = years;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FinanceTotalsApi - functional programming interface
 * @export
 */
export const FinanceTotalsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FinanceTotalsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFinanceTotalsKeyGet(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FinanceTotalsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFinanceTotalsKeyGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFinanceTotalsKeyYearsGet(key: string, years?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FinanceTotalsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFinanceTotalsKeyYearsGet(key, years, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiFinanceTotalsYearsGet(years?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FinanceTotalsDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiFinanceTotalsYearsGet(years, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FinanceTotalsApi - factory interface
 * @export
 */
export const FinanceTotalsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FinanceTotalsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFinanceTotalsKeyGet(key: string, options?: any): AxiosPromise<Array<FinanceTotalsDTO>> {
            return localVarFp.apiFinanceTotalsKeyGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFinanceTotalsKeyYearsGet(key: string, years?: Array<number>, options?: any): AxiosPromise<Array<FinanceTotalsDTO>> {
            return localVarFp.apiFinanceTotalsKeyYearsGet(key, years, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiFinanceTotalsYearsGet(years?: Array<number>, options?: any): AxiosPromise<Array<FinanceTotalsDTO>> {
            return localVarFp.apiFinanceTotalsYearsGet(years, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FinanceTotalsApi - object-oriented interface
 * @export
 * @class FinanceTotalsApi
 * @extends {BaseAPI}
 */
export class FinanceTotalsApi extends BaseAPI {
    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceTotalsApi
     */
    public apiFinanceTotalsKeyGet(key: string, options?: AxiosRequestConfig) {
        return FinanceTotalsApiFp(this.configuration).apiFinanceTotalsKeyGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} key 
     * @param {Array<number>} [years] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceTotalsApi
     */
    public apiFinanceTotalsKeyYearsGet(key: string, years?: Array<number>, options?: AxiosRequestConfig) {
        return FinanceTotalsApiFp(this.configuration).apiFinanceTotalsKeyYearsGet(key, years, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [years] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FinanceTotalsApi
     */
    public apiFinanceTotalsYearsGet(years?: Array<number>, options?: AxiosRequestConfig) {
        return FinanceTotalsApiFp(this.configuration).apiFinanceTotalsYearsGet(years, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScheduleBDetailApi - axios parameter creator
 * @export
 */
export const ScheduleBDetailApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleBDetailKeyGet: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiScheduleBDetailKeyGet', 'key', key)
            const localVarPath = `/api/ScheduleBDetail/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} key 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleBDetailKeyYearsGet: async (key: string, years?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiScheduleBDetailKeyYearsGet', 'key', key)
            const localVarPath = `/api/ScheduleBDetail/{key}/years`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (years) {
                localVarQueryParameter['years'] = years;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleBDetailYearsGet: async (years?: Array<number>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/ScheduleBDetail/years`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (years) {
                localVarQueryParameter['years'] = years;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleBDetailApi - functional programming interface
 * @export
 */
export const ScheduleBDetailApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleBDetailApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleBDetailKeyGet(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleBDetailDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleBDetailKeyGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} key 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleBDetailKeyYearsGet(key: string, years?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleBDetailDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleBDetailKeyYearsGet(key, years, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleBDetailYearsGet(years?: Array<number>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleBDetailDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleBDetailYearsGet(years, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleBDetailApi - factory interface
 * @export
 */
export const ScheduleBDetailApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleBDetailApiFp(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleBDetailKeyGet(key: string, options?: any): AxiosPromise<Array<ScheduleBDetailDTO>> {
            return localVarFp.apiScheduleBDetailKeyGet(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} key 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleBDetailKeyYearsGet(key: string, years?: Array<number>, options?: any): AxiosPromise<Array<ScheduleBDetailDTO>> {
            return localVarFp.apiScheduleBDetailKeyYearsGet(key, years, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {Array<number>} [years] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleBDetailYearsGet(years?: Array<number>, options?: any): AxiosPromise<Array<ScheduleBDetailDTO>> {
            return localVarFp.apiScheduleBDetailYearsGet(years, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleBDetailApi - object-oriented interface
 * @export
 * @class ScheduleBDetailApi
 * @extends {BaseAPI}
 */
export class ScheduleBDetailApi extends BaseAPI {
    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleBDetailApi
     */
    public apiScheduleBDetailKeyGet(key: string, options?: AxiosRequestConfig) {
        return ScheduleBDetailApiFp(this.configuration).apiScheduleBDetailKeyGet(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} key 
     * @param {Array<number>} [years] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleBDetailApi
     */
    public apiScheduleBDetailKeyYearsGet(key: string, years?: Array<number>, options?: AxiosRequestConfig) {
        return ScheduleBDetailApiFp(this.configuration).apiScheduleBDetailKeyYearsGet(key, years, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {Array<number>} [years] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleBDetailApi
     */
    public apiScheduleBDetailYearsGet(years?: Array<number>, options?: AxiosRequestConfig) {
        return ScheduleBDetailApiFp(this.configuration).apiScheduleBDetailYearsGet(years, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ScheduleBOverviewApi - axios parameter creator
 * @export
 */
export const ScheduleBOverviewApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleBOverviewKeyGet: async (key: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            assertParamExists('apiScheduleBOverviewKeyGet', 'key', key)
            const localVarPath = `/api/ScheduleBOverview/{key}`
                .replace(`{${"key"}}`, encodeURIComponent(String(key)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScheduleBOverviewApi - functional programming interface
 * @export
 */
export const ScheduleBOverviewApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScheduleBOverviewApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiScheduleBOverviewKeyGet(key: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ScheduleBCandidateOverview>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiScheduleBOverviewKeyGet(key, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ScheduleBOverviewApi - factory interface
 * @export
 */
export const ScheduleBOverviewApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScheduleBOverviewApiFp(configuration)
    return {
        /**
         * 
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiScheduleBOverviewKeyGet(key: string, options?: any): AxiosPromise<Array<ScheduleBCandidateOverview>> {
            return localVarFp.apiScheduleBOverviewKeyGet(key, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScheduleBOverviewApi - object-oriented interface
 * @export
 * @class ScheduleBOverviewApi
 * @extends {BaseAPI}
 */
export class ScheduleBOverviewApi extends BaseAPI {
    /**
     * 
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScheduleBOverviewApi
     */
    public apiScheduleBOverviewKeyGet(key: string, options?: AxiosRequestConfig) {
        return ScheduleBOverviewApiFp(this.configuration).apiScheduleBOverviewKeyGet(key, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UIApi - axios parameter creator
 * @export
 */
export const UIApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} year 
         * @param {boolean} [wasElected] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUICandidatesbyYearYearGet: async (year: number, wasElected?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'year' is not null or undefined
            assertParamExists('apiUICandidatesbyYearYearGet', 'year', year)
            const localVarPath = `/api/UI/CandidatesbyYear/{year}`
                .replace(`{${"year"}}`, encodeURIComponent(String(year)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (wasElected !== undefined) {
                localVarQueryParameter['wasElected'] = wasElected;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUIElectionYearsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/UI/ElectionYears`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UIApi - functional programming interface
 * @export
 */
export const UIApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UIApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} year 
         * @param {boolean} [wasElected] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUICandidatesbyYearYearGet(year: number, wasElected?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CandidateUIDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUICandidatesbyYearYearGet(year, wasElected, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUIElectionYearsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<number>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUIElectionYearsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UIApi - factory interface
 * @export
 */
export const UIApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UIApiFp(configuration)
    return {
        /**
         * 
         * @param {number} year 
         * @param {boolean} [wasElected] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUICandidatesbyYearYearGet(year: number, wasElected?: boolean, options?: any): AxiosPromise<Array<CandidateUIDTO>> {
            return localVarFp.apiUICandidatesbyYearYearGet(year, wasElected, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUIElectionYearsGet(options?: any): AxiosPromise<Array<number>> {
            return localVarFp.apiUIElectionYearsGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UIApi - object-oriented interface
 * @export
 * @class UIApi
 * @extends {BaseAPI}
 */
export class UIApi extends BaseAPI {
    /**
     * 
     * @param {number} year 
     * @param {boolean} [wasElected] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    public apiUICandidatesbyYearYearGet(year: number, wasElected?: boolean, options?: AxiosRequestConfig) {
        return UIApiFp(this.configuration).apiUICandidatesbyYearYearGet(year, wasElected, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UIApi
     */
    public apiUIElectionYearsGet(options?: AxiosRequestConfig) {
        return UIApiFp(this.configuration).apiUIElectionYearsGet(options).then((request) => request(this.axios, this.basePath));
    }
}


